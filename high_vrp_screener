def get_sp500_tickers():
    url = "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
    tables = pd.read_html(url)
    return tables[0]['Symbol'].tolist()

def compute_realized_volatility(data, window=20):
    high, low = data['High'], data['Low']
    open_price, close = data['Open'], data['Close']
    log_hl = np.log(high / low)
    log_co = np.log(close / open_price)
    log_cc = np.log(close).diff()
    close_to_close = log_cc.rolling(window).std() * np.sqrt(252)
    garman_klass = np.sqrt((0.5 * log_hl**2 - (2 * np.log(2) - 1) * log_co**2).rolling(window).mean() * 252)
    parkinson = np.sqrt((log_hl**2 / (4 * np.log(2))).rolling(window).mean() * 252)
    k = 0.34 / (1.34 + (window + 1) / (window - 1))
    yang_zhang = (k * log_co**2) + ((1 - k) * (log_hl**2 / 2)) + ((1 - k) * log_cc**2)
    yang_zhang_vol = np.sqrt(yang_zhang.rolling(window).mean() * 252)
    return pd.DataFrame({
        'Close-to-Close': close_to_close,
        'Garman-Klass': garman_klass,
        'Parkinson': parkinson,
        'Yang-Zhang': yang_zhang_vol
    }).dropna()

def fit_garch_model(returns):
    model = arch_model(returns, vol="Garch", p=1, q=1)
    result = model.fit(disp='off')
    return result

def get_garch_forecast(result, horizon=5):
    forecast = result.forecast(horizon=horizon, method="analytic")
    garch_forecasted_vol = np.sqrt(forecast.variance.iloc[-1, :].sum() / horizon) * np.sqrt(252)
    return garch_forecasted_vol

def screen_stocks(tickers, threshold=0.35):
    results = []
    for ticker in tickers[:500]:
        try:
            stock = yf.Ticker(ticker)
            data = stock.history(period="3mo")
            if data.empty:
                continue
            
            realized_vol = compute_realized_volatility(data)
            smoothed_realized_vol = realized_vol.rolling(21).mean().iloc[-1]
            returns = data['Close'].pct_change().dropna() * 100
            garch_result = fit_garch_model(returns)
            garch_forecasted_vol = get_garch_forecast(garch_result) / 100
            
            weights = {"Yang-Zhang": 0.18, "Close-to-Close": 0.18, "Parkinson": 0.08, "Garman-Klass": 0.16, "GARCH": 0.40}
            weighted_average_realized_vol = sum(smoothed_realized_vol[col] * weights[col] for col in smoothed_realized_vol.index)
            weighted_average_realized_vol += garch_forecasted_vol * weights["GARCH"]
            
            current_price = stock.history(period='1d')['Close'].iloc[-1]
            expirations = stock.options
            friday_expirations = [date for date in expirations if datetime.datetime.strptime(date, "%Y-%m-%d").weekday() == 4]
            
            if friday_expirations:
                option_chain = stock.option_chain(friday_expirations[0])
                calls = option_chain.calls[['strike', 'impliedVolatility']]
                puts = option_chain.puts[['strike', 'impliedVolatility']]
                atm_call = calls.iloc[(calls['strike'] - current_price).abs().argsort()[:1]]
                atm_put = puts.iloc[(puts['strike'] - current_price).abs().argsort()[:1]]
                straddle_iv = (atm_call['impliedVolatility'].values[0] + atm_put['impliedVolatility'].values[0]) / 2
                iv_diff = straddle_iv - weighted_average_realized_vol
                
                if iv_diff > threshold:
                    results.append({
                        "Ticker": ticker,
                        "Current Price": current_price,
                        "Straddle IV": straddle_iv,
                        "Weighted Forecast Vol": weighted_average_realized_vol,
                        "IV Diff": iv_diff
                    })
        except Exception as e:
            print(f"Skipping {ticker}: {e}")
    
    return pd.DataFrame(results)

# Run Screener
tickers = get_sp500_tickers()
filtered_results = screen_stocks(tickers)
display(filtered_results.sort_values(by='IV Diff', ascending=False))